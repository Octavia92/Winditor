<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json"#>
// <#@ assembly name="$(ProjectDir)/../WCommon/lib/GameFormatReader.dll"#>
<#@ assembly name="$(TargetPath)"#>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="WindEditor" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GameFormatReader.Common" #>
<#@ output extension=".cs" #>

<#

var ProjectDirPath = Host.ResolveAssemblyReference("$(ProjectDir)");
var TemplatePath = ProjectDirPath + "resources/templates/";

#>
using GameFormatReader.Common;
using OpenTK;
using System.ComponentModel;
using System.Diagnostics;
using System;
using System.Collections.Generic;

namespace WindEditor
{
	public abstract class SerializableDOMNode : WDOMNode
	{
		public readonly FourCC FourCC;
		public MapLayer Layer { get { return m_layer; } set { m_layer = value; OnPropertyChanged("Layer"); } }

		private MapLayer m_layer;

		public SerializableDOMNode(FourCC fourCC, WWorld world) : base(world)
		{
			FourCC = fourCC;
			OnConstruction();
		}

		// Called by the constructor, override this if you want to put things in your own constructor in a partial class.
		public virtual void OnConstruction() {}

		// This is called after the data is loaded out of the disk. Use this if you need to post-process the loaded data.
		public virtual void PostLoad(List<WDOMNode> sceneList) {}

		// This is called before writing data to the disk. Use this if you need to pre-process the data to be saved.
		public virtual void PreSave() {}

		public virtual void Load(EndianBinaryReader stream) {}
		public virtual void Save(EndianBinaryWriter stream) {}
	}

	public partial class VisibleDOMNode : SerializableDOMNode
	{
		public VisibleDOMNode(FourCC fourCC, WWorld world) : base(fourCC, world)
		{
		}
	}
	 

<#

// We sometimes have duplicate templates to handle loading from the file, so we'll not generate duplicate classes.
List<string> usedClassNames = new List<string>();
foreach (var file in Directory.GetFiles(TemplatePath))
{
    MapActorDescriptor descriptor = JsonConvert.DeserializeObject<MapActorDescriptor>(File.ReadAllText(file));
	string className = descriptor.ClassName;
	string parentClassName = string.IsNullOrEmpty(descriptor.ParentClassOverride) ? "SerializableDOMNode" : descriptor.ParentClassOverride;
#>
	// AUTO-GENERATED, MODIFICATIONS TO THIS FILE WILL BE LOST
	public partial class <#= className #> : <#= parentClassName #>
	{
		// Auto-Generated Properties from Templates
<#
		// We skip these fields as they're pulled out in the load function and we don't want duplicate properties.
		var skippedFields = new List<string>(new []{"Position", "XRotation", "YRotation", "ZRotation", "XScale", "YScale", "ZScale"});
		foreach(var field in descriptor.Fields)
		{
			if(skippedFields.Contains(field.FieldName.Replace(" ", "")))
				continue; 

			string fieldName = field.FieldName.Replace(" ", "");
			string fieldType = PropertyValueToOutput(field.FieldType);
			string privateFieldName = "m_" + fieldName;
			string overrideName = field.FieldName == "Name" ? "override" : "";
			
#>
		private <#=fieldType#> <#=privateFieldName#>;
<#		 // We hide padding and other fields that the user doesn't need to see/change.
		if(!field.Hidden)
		{
#>
		<#= overrideName #> public <#= fieldType #> <#= fieldName #>
		{ 
			get { return <#=privateFieldName#>; }
			set
			{
				<#=privateFieldName#> = value;
				OnPropertyChanged("<#=fieldName#>");
			}
		}
<#		}#>				

<#
		}
#>

		// Constructor
		public <#= className #>(FourCC fourCC, WWorld world) : base(fourCC, world)
		{
<# 
			foreach(var field in descriptor.Fields)
			{
			   if(!field.Hidden && !skippedFields.Contains(field.FieldName.Replace(" ", "")))
			   {
				   string propertyFieldName = field.FieldName.Replace(" ", ""); 
#>			VisibleProperties.Add(new Xceed.Wpf.Toolkit.PropertyGrid.PropertyDefinition() { DisplayName = "<#=field.FieldName#>", TargetProperties = new string[] { "<#=propertyFieldName#>"} });
<#
   
				}
			}
#>
		}

		override public void Load(EndianBinaryReader stream)
		{
<#			foreach(var field in descriptor.Fields)
			{
				string fieldName = field.FieldName.Replace(" ", "");
				string loadFunction = string.Empty;
				string assertFunction = string.Empty;

				if(fieldName == "Position") 
				{
					loadFunction = "Transform.Position = new OpenTK.Vector3(stream.ReadSingle(), stream.ReadSingle(), stream.ReadSingle());";
				}
				else if (fieldName == "XRotation")
				{
					loadFunction =  "float xRot = WMath.RotationShortToFloat(stream.ReadInt16());" + 
									"Quaternion xRotQ = Quaternion.FromAxisAngle(new Vector3(1, 0, 0), WMath.DegreesToRadians(xRot));" +
									"Transform.Rotation = Transform.Rotation * xRotQ;";
				}
				else if (fieldName == "YRotation")
				{
					loadFunction =  "float yRot = WMath.RotationShortToFloat(stream.ReadInt16());" +
									"Quaternion yRotQ = Quaternion.FromAxisAngle(new Vector3(0, 1, 0), WMath.DegreesToRadians(yRot));" +
									"Transform.Rotation = Transform.Rotation * yRotQ;";
				}
				else if(fieldName == "ZRotation")
				{
					loadFunction =  "float zRot = WMath.RotationShortToFloat(stream.ReadInt16());" +
									"Quaternion zRotQ = Quaternion.FromAxisAngle(new Vector3(0, 0, 1), WMath.DegreesToRadians(zRot));" +
									"Transform.Rotation = Transform.Rotation * zRotQ;";
				}
				else if(fieldName == "XScale")
				{
					loadFunction = "float xScale = stream.ReadByte() / 10f;" +
									"Transform.LocalScale = new Vector3(xScale, Transform.LocalScale.Y, Transform.LocalScale.Z);";
				}
				else if(fieldName == "YScale")
				{
					loadFunction = "float yScale = stream.ReadByte() / 10f;" +
									"Transform.LocalScale = new Vector3(Transform.LocalScale.X, yScale, Transform.LocalScale.Z);";
				}
				else if(fieldName == "ZScale")
				{
					loadFunction = "float zScale = stream.ReadByte() / 10f;" +
									"Transform.LocalScale = new Vector3(Transform.LocalScale.X, Transform.LocalScale.Y, zScale);";
				}
				else
				{
					loadFunction = string.Format("m_{0} = {1}", fieldName, GetReadFunction(field.FieldType, field.Length));
					if(fieldName.StartsWith("Padding"))
					{
						switch(field.FieldType)
						{
							case PropertyValueType.Byte:
								assertFunction = "Trace.Assert(m_" + fieldName + " == 0xFF || m_" + fieldName + "== 0); // Padding"; break;
							case PropertyValueType.Short:
								assertFunction = "Trace.Assert((ushort)m_" + fieldName + " == 0xFFFF || m_" + fieldName + "== 0); // Padding"; break;
							case PropertyValueType.Int:
								assertFunction = "Trace.Assert((uint)m_" + fieldName + " == 0xFFFFFFFF || m_" + fieldName + "== 0); // Padding"; break;
						}
					}
				}
				#>
			<#= loadFunction#> <#=assertFunction#>
<#

			}
#>
		}

		override public void Save(EndianBinaryWriter stream)
		{
			// Just convert their rotation to Euler Angles now instead of doing it in parts later.
            Vector3 eulerRot = Transform.Rotation.ToEulerAngles();
			Vector3 originalRot = new Vector3(Transform.Rotation.FindQuaternionTwist(Vector3.UnitX) * Math.Sign(eulerRot.X),Transform.Rotation.FindQuaternionTwist(Vector3.UnitY) * Math.Sign(eulerRot.Y), Transform.Rotation.FindQuaternionTwist(Vector3.UnitZ) * Math.Sign(eulerRot.Z)); 

<#			foreach(var field in descriptor.Fields)
			{
				string fieldName = field.FieldName.Replace(" ", "");
				string saveFunction = string.Empty;

				if(fieldName == "Position") 
				{
					saveFunction = "stream.Write((float)Transform.Position.X); stream.Write((float)Transform.Position.Y); stream.Write((float)Transform.Position.Z);";
				}
				else if (fieldName == "XRotation")
				{
					saveFunction =  "stream.Write(WMath.RotationFloatToShort(originalRot.X));";
				}
				else if (fieldName == "YRotation")
				{
					saveFunction =  "stream.Write(WMath.RotationFloatToShort(originalRot.Y));";
				}
				else if(fieldName == "ZRotation")
				{
					saveFunction =  "stream.Write(WMath.RotationFloatToShort(originalRot.Z));";
				}
				else if(fieldName == "XScale")
				{
					saveFunction = "stream.Write((byte)(Transform.LocalScale.X * 10));";
				}
				else if(fieldName == "YScale")
				{
					saveFunction = "stream.Write((byte)(Transform.LocalScale.Y * 10));";
				}
				else if(fieldName == "ZScale")
				{
					saveFunction = "stream.Write((byte)(Transform.LocalScale.Z * 10));";
				}
				else if(fieldName.StartsWith("Padding"))
				{
					switch(field.FieldType)
					{
						case PropertyValueType.Byte:
							// Some of the padding fields are 0x00, so we write zero instead of 0xFF.
							saveFunction = string.Format("stream.Write((byte)0); // Padding"); break;
						case PropertyValueType.Short:
							// Some of the padding fields are 0x00, so we write zero instead of 0xFF.
							saveFunction = string.Format("stream.Write((short)0); // Padding"); break;
						case PropertyValueType.Int:
							// Some of the padding fields are 0x00, so we write zero instead of 0xFF.
							saveFunction = string.Format("stream.Write((int)0); // Padding"); break;
					}
				}
				else
				{
					saveFunction = GetSaveFunction(field.FieldType, fieldName, field.Length);
				}#>
			<#= saveFunction#>
<#

			}
#>
		}
	}

<#
}
#>

} // namespace WindEditor

<#+
string PropertyValueToOutput(PropertyValueType type)
{
	switch(type)
	{
		case PropertyValueType.Byte:
			return "byte";
		case PropertyValueType.Bool:
			return "bool";
		case PropertyValueType.Short:
			return "short";
		case PropertyValueType.Int:
			return "int";
		case PropertyValueType.Float:
			return "float";
		case PropertyValueType.String:
			return "string";
		case PropertyValueType.FixedLengthString:
			return "string";
		case PropertyValueType.Vector2:
			return "Vector2";
		case PropertyValueType.Vector3:
			return "Vector3";
		case PropertyValueType.XRotation:
		case PropertyValueType.YRotation:
		case PropertyValueType.ZRotation:
			return "float /*single axis rotation */";
		case PropertyValueType.Color24:
		case PropertyValueType.Color32:
			return "WLinearColor";
		default:
			return "Unknown Enum to String Type";
	}
}

string GetReadFunction(PropertyValueType type, uint Length = 0)
{
	switch(type)
	{
		case PropertyValueType.Byte: 
			return "stream.ReadByte();";
		case PropertyValueType.Bool:
			return "stream.ReadBoolean();";
		case PropertyValueType.Short:
			return "stream.ReadInt16();";
		case PropertyValueType.Int:
			return "stream.ReadInt32();";
		case PropertyValueType.Float:
			return "stream.ReadSingle();";
		case PropertyValueType.String:
			return "stream.ReadString().Trim(new[] { '\\0' });"; 
		case PropertyValueType.FixedLengthString:
			return Length == 0 ? "stream.ReadStringUntil('\\0').Trim(new[] { '\\0' });" : string.Format("stream.ReadString({0}).Trim(new[] {{ '\\0' }});", Length);
		case PropertyValueType.Vector2:
		return "new OpenTK.Vector2(stream.ReadSingle(), stream.ReadSingle());";
			case PropertyValueType.Vector3:
		return "new OpenTK.Vector3(stream.ReadSingle(), stream.ReadSingle(), stream.ReadSingle());";
		case PropertyValueType.XRotation:
		case PropertyValueType.YRotation:
		case PropertyValueType.ZRotation:
			return "stream.ReadInt16();";
		case PropertyValueType.Color24:
			return "new WLinearColor(stream.ReadByte() / 255f, stream.ReadByte() / 255f, stream.ReadByte()/255f);";
		case PropertyValueType.Color32:
			return "new WLinearColor(stream.ReadByte() / 255f, stream.ReadByte() / 255f, stream.ReadByte()/255f, stream.ReadByte()/255f);";
		default:
			return "Unknown Enum to String Type";
	}
}

string GetSaveFunction(PropertyValueType type, string varName, uint Length = 0)
{
	switch(type)
	{
		case PropertyValueType.Byte: 
			return string.Format("stream.Write((byte){0});", varName);
		case PropertyValueType.Bool:
			return string.Format("stream.Write((bool){0});", varName);
		case PropertyValueType.Short:
			return string.Format("stream.Write((short){0});", varName);
		case PropertyValueType.Int:
			return string.Format("stream.Write((int){0});", varName);
		case PropertyValueType.Float:
			return string.Format("stream.Write((float){0});", varName);
		case PropertyValueType.String:
			return string.Format("stream.Write({0}.ToCharArray() + '\\0');", varName);
		case PropertyValueType.FixedLengthString:
			return string.Format("stream.Write({0}.PadRight({1}, '\\0').ToCharArray());", varName, Length);
		case PropertyValueType.Vector2:
		return string.Format("stream.Write((float){0}.X); stream.Write((float){0}.Y);", varName);
			case PropertyValueType.Vector3:
		return string.Format("stream.Write((float){0}.X); stream.Write((float){0}.Y); stream.Write((float){0}.Z);", varName);
		case PropertyValueType.XRotation:
		case PropertyValueType.YRotation:
		case PropertyValueType.ZRotation:
			return string.Format("stream.Write((short){0});", varName);
		case PropertyValueType.Color24:
			return string.Format("stream.Write((byte)({0}.R*255)); stream.Write((byte)({0}.G*255)); stream.Write((byte)({0}.B*255));", varName);
		case PropertyValueType.Color32:
			return string.Format("stream.Write((byte)({0}.R*255)); stream.Write((byte)({0}.G*255)); stream.Write((byte)({0}.B*255)); stream.Write((byte)({0}.A*255));", varName);
		default:
			return "Unknown Enum to String Type";
	}
}
#>